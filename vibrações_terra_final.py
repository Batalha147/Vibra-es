# -*- coding: utf-8 -*-
"""Vibrações Terra Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cibcv_RYwsM8yhvnkJT0HiGe6EeAj1tY

# Importação das bibliotecas
"""

import numpy as np 
from numpy.linalg import inv
from matplotlib import pyplot as plt
import pandas as pd

"""# Definição das variáveis e contantes"""

# constantes
m = 200
k = [50, 100, 250, 500]
c = 300

#k = [500, 1000, 2500, 10000]

delta_t = 0.02
time = np.arange(0, 10 + delta_t, delta_t)

# leitura da força do excel
external_force = pd.read_excel('force_array_1.xlsx')
external_force = external_force
external_force = external_force.to_numpy()

complemento_forca = np.zeros((1, len(time) - len(external_force)))
external_force = np.append(external_force , complemento_forca[0])
count = np.arange(0,len(time)-1,1)

"""# Estado inicial"""

y = np.array([0,0])   # [velocity, displacement]

A = np.array([[m,0],
              [0,1]])

Y_dis = [] #displacement
Y_vel = [] #velocity

"""# Método de Euler"""

for i in k:
	F = np.array([0.0, 0.0])
	B = np.array([[c,i], [-1,0]])
	y = np.array([0,0]) 
	sub_ydis = []
	sub_yvel = []
	for t, f in zip(time, external_force):
		F[0] = f

		y = y + delta_t * inv(A).dot( F - B.dot(y) )

		# Limite físico de curso
		if y[1]>=0.25:
			y[1]=0.25
		if y[1]<=-0.25:
			y[1]=-0.25
		
		sub_ydis.append(y[1]) #displacement
		sub_yvel.append(y[0]) #velocity
	Y_dis.append(sub_ydis) #displacement
	Y_vel.append(sub_yvel) #velocity

"""# - ($\xi$) Amortecimento crítico 
# - ($\omega_n$) Frequência natural
"""

for i in k:
  print('k = ', i)
  print('Critical Damping:', (c/(2*m*(np.sqrt(i/m)))))
  print('Natural Frequency:', np.sqrt(i/m))
  print('\n')

"""# Gráfico da força"""

plt.plot(time, external_force)
plt.grid(True)
plt.legend(['Force'], loc='lower right')
plt.show()

"""# Gráficos do deslocamento no tempo por k"""

n = len(k)/2
m = len(k)/2

fig, axs = plt.subplots(int(n), int(m), sharex=True, sharey=True, figsize=(16,8))
for i, j, w, u in zip([0,0,1,1], [0,1,0,1], range(0, len(k), 1), k):
  axs[i,j].plot(time, Y_dis[w])
  axs[i,j].plot(time, external_force/10000)
  axs[i,j].set_title('k = '+str(k[w])+', Critical Damping: '+str(round((c/(2*m*(np.sqrt(u/m))))/10,2)))
  axs[i,j].set_xlabel('Tempo (s)')
  axs[i,j].set_ylabel('Deslocamento (m)')
  axs[i,j].legend(['Deslocamento (m)', 'Força (N/10^4)'])
  axs[i,j].grid(True)

"""# Gráficos da velocidade no tempo por k"""

n = len(k)/2
m = len(k)/2

fig, axs = plt.subplots(int(n), int(m), sharex=True, sharey=True, figsize=(16,8))
for i, j, w, u in zip([0,0,1,1], [0,1,0,1], range(0, len(k), 1), k):
  axs[i,j].plot(time, Y_vel[w])
  axs[i,j].plot(time, external_force/3000)
  axs[i,j].set_title('k = '+str(k[w])+', Critical Damping: '+str(round((c/(2*m*(np.sqrt(u/m))))/10,2)))
  axs[i,j].set_xlabel('Tempo (s)')
  axs[i,j].set_ylabel('Velocidade (m/s)')
  axs[i,j].legend(['Velocidade (m/s)', 'Força (N/3000)'])
  axs[i,j].grid(True)